<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="tensor__2d_8c" kind="file" language="C++">
    <compoundname>tensor_2d.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="tensor__2d_8h" local="yes">tensor_2d.h</includes>
    <incdepgraph>
      <node id="1">
        <label>tensor_2d.c</label>
        <link refid="tensor__2d_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>tensor_2d.h</label>
        <link refid="tensor__2d_8h"/>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="tensor__2d_8c_1a63649d1769e1ed482025cd15b43da0f7" prot="public" static="no">
        <name>MAX_NUM_ELEMENTS</name>
        <initializer>268435456</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="8" column="9" bodyfile="src/tensor_2d.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tensor__2d_8c_1a2667b0018203aabb8f0427b382d17f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
        <definition>tensor_2d * mat_make</definition>
        <argsstring>(unsigned int num_rows, unsigned int num_cols)</argsstring>
        <name>mat_make</name>
        <param>
          <type>unsigned int</type>
          <declname>num_rows</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_cols</declname>
        </param>
        <briefdescription>
<para>Function reutrns a pointer to a matrix, with specfied number of rows and columns. Function uses malloc to allocate memory for a &apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; sturct which acts as a 2 dimensional matrix. The actual matrix elemetns are stroed in <ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">tensor_2d.data</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note matrix variables are note initalised to any specfic value!!! Maximum allowed matrix size is specfied by &apos;MAX_NUM_ELEMENTS&apos; in &apos;<ref refid="tensor__2d_8c" kindref="compound">tensor_2d.c</ref>&apos; as 268435456. Corresponding to a matrix of 16384 rows and 16384 columns, using 0.25GB of ram, to store.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned int: the number of rows the matrix should have. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned int: the number of columns the matrix should have. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tensor_2d* A pointer to a <ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> object that acts as a matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="10" column="11" bodyfile="src/tensor_2d.c" bodystart="10" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1ad153f4d7a7d83c0ede5ebf3217fcb02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_free</definition>
        <argsstring>(tensor_2d **mat_ptr)</argsstring>
        <name>mat_free</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> **</type>
          <declname>mat_ptr</declname>
        </param>
        <briefdescription>
<para>Function takes in a pointer to a pointer to a matrix, and frees the memory of &apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; struct Function sets the pointer that the input pointer points to NULL after freeing momeory. This function is effectivelz the counter part to &apos;mat_make&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer where the &apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; sturct is located. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="48" column="5" bodyfile="src/tensor_2d.c" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1ae908690f3acf39314e6bf3f944f5ca98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_zeros</definition>
        <argsstring>(tensor_2d *mat_out)</argsstring>
        <name>mat_zeros</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Sets all elements of input matrix to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix whose values will be set to 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="61" column="5" bodyfile="src/tensor_2d.c" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1a2b806e3d6872c2617c3c820b0337fdfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_rand</definition>
        <argsstring>(double low, double high, tensor_2d *mat_out)</argsstring>
        <name>mat_rand</name>
        <param>
          <type>double</type>
          <declname>low</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Sets all elements of input matrix to value in the range of [low, high]. </para>
        </briefdescription>
        <detaileddescription>
<para>Note, random number allocate,on is not truly random and should not be used for crytography. Function uses &apos;rand()&apos; from &lt;stdlib.h&gt; and divivdes by 2147483647.0 to put numbers in the range of [0, 1]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">low</parametername>
</parameternamelist>
<parameterdescription>
<para>double : defining the lower limit of the random numbers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">high</parametername>
</parameternamelist>
<parameterdescription>
<para>double : defining the upper limit of the random numbers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer whose values will be set to random numbers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="72" column="5" bodyfile="src/tensor_2d.c" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1a957359600527bb5755783f637bcedbb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_eye</definition>
        <argsstring>(tensor_2d *mat_out)</argsstring>
        <name>mat_eye</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Takes an input matrix and sets its elements to that of an identiy matrix of the same size. </para>
        </briefdescription>
        <detaileddescription>
<para>Note the input &apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer should point to a square matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer with values set to identiy matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL, 2 if input matrix is not square. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="83" column="5" bodyfile="src/tensor_2d.c" bodystart="83" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1adeaac7723f2ea3c6d7019ba1c3faabd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_print</definition>
        <argsstring>(tensor_2d *mat)</argsstring>
        <name>mat_print</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Function used to print all the elements of a matrix to the terminal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the matrix to print out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="99" column="5" bodyfile="src/tensor_2d.c" bodystart="99" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1a9ae20928f936d462d68cf5b1596283e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_add</definition>
        <argsstring>(tensor_2d *mat_a, tensor_2d *mat_b, tensor_2d *mat_out)</argsstring>
        <name>mat_add</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_a</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_b</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Function adds input matriceis &apos;mat_a&apos; and &apos;mat_b&apos; and stores result in &apos;mat_out&apos; matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Note 3 input pointers should point to matricies of the same dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat_a</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer whose elements should be added to matrix &apos;mat_b&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mat_b</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer whose elements should be added to matrix &apos;mat_a&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer whose elements are the sum of the corresponding elements in matricies &apos;mat_a&apos; and &apos;mat_b&apos; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL, 2 if input matrices have different dimensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="113" column="5" bodyfile="src/tensor_2d.c" bodystart="113" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1a737a62b14085e7e309f3b1ffe1eb26dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_sub</definition>
        <argsstring>(tensor_2d *mat_a, tensor_2d *mat_b, tensor_2d *mat_out)</argsstring>
        <name>mat_sub</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_a</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_b</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Function subtracts the elements of matrix &apos;mat_b&apos; from the corresponding elements of matrix &apos;mat_a&apos;, and stores result in &apos;mat_out&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>&apos;mat_out&apos;.data = &apos;mat_a&apos;.data - &apos;mat_b&apos;.data</para>
<para>Note 3 input pointers should point to matricies of the same dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat_a</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mat_b</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer to a matrix that stores the subtraction of elements in &apos;mat_b&apos; from elements in &apos;mat_a&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL, 2 if input matrices have different dimensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="130" column="5" bodyfile="src/tensor_2d.c" bodystart="130" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1a574ba2646f2cf52aec9655161f3d9607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_mul</definition>
        <argsstring>(tensor_2d *mat_a, tensor_2d *mat_b, tensor_2d *mat_out)</argsstring>
        <name>mat_mul</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_a</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_b</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Function multiplies to matricies, and stores result in &apos;mat_out&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>Note number of columns in &apos;mat_a&apos; should be equal to number of rows in &apos;mat_b&apos;. And number of rows of &apos;mat_out&apos; should be equal to number of rows of &apos;mat_a&apos;, and number of columns of &apos;mat_out&apos; should be equal to number of columns of &apos;mat_b&apos;,</para>
<para>Performs standard matrix multiplication: &apos;mat_out&apos;.data = &apos;mat_a&apos;.data * &apos;mat_b&apos;.data</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat_a</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mat_b</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; Pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer that stores the results of the matrix multiplication of &apos;mat_a&apos; and &apos;mat_b&apos; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL, 2 if input matrices have wrong dimensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="147" column="5" bodyfile="src/tensor_2d.c" bodystart="147" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1a7f8ce2f8aaa0c61e84c9ab72e1a4cef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_transpose</definition>
        <argsstring>(tensor_2d *mat, tensor_2d *mat_out)</argsstring>
        <name>mat_transpose</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Function tranposes an input matrix and stores the result in the other input matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Note number of rows in &apos;mat&apos; should be equal to number of columns in &apos;mat_out&apos;, and number of columns in &apos;mat&apos; should be equal to number of rows in &apos;mat_out&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer, to tranpose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer to store tranposed matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL, 2 if input matrices have wrong dimensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="170" column="5" bodyfile="src/tensor_2d.c" bodystart="170" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1ab29c9ef88f94cc1ec4d680df1937cd07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_copy</definition>
        <argsstring>(tensor_2d *mat, tensor_2d *mat_out)</argsstring>
        <name>mat_copy</name>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Function copies contents of the input &apos;mat&apos; matrix into the &apos;mat_out&apos; matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL, 2 if input matrices have wrong dimensions. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="187" column="5" bodyfile="src/tensor_2d.c" bodystart="187" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1acd1ed3b8431bd34db8454fc20d2e9254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_apply_func</definition>
        <argsstring>(double(func)(double d), tensor_2d *mat, tensor_2d *mat_out)</argsstring>
        <name>mat_apply_func</name>
        <param>
          <type>double(func)(double d)</type>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Function used to apply a given input function to all elements of an input matrix, and storing the result in other input matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Function iterates over data stored in &apos;mat&apos; and applies the input function to every element, and stores the result in &apos;mat_out&apos; Note, both input matricies should have the same dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function that takes in a double and returns a double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mat</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer to whose elements the function should be applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; pointer, which will store the result of applying the function to &apos;mat&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL, 2 if input matrices have different dimensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="203" column="5" bodyfile="src/tensor_2d.c" bodystart="203" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="tensor__2d_8c_1ada02f47e919e61813c57d8b990ed4ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mat_apply_func_2</definition>
        <argsstring>(void(func)(double d, int reset, void *out_var), tensor_2d *mat, void *out_var)</argsstring>
        <name>mat_apply_func_2</name>
        <param>
          <type>void(func)(double d, int reset, void *out_var)</type>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out_var</declname>
        </param>
        <briefdescription>
<para>Function applies input function to all elements of of the input matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is supposed to use to perform analysis on a matrix, and not to modify matrix elements in anyway.</para>
<para>The provided input function should take in a double, a &apos;reset&apos; flag, and an optional ouput (out_var) variable. The function is applied to all elements in the matrix, and on the last element the reset flag is set to 1. The output varible which the functions takes in, is the same output variable that this function (mat_apply_func_2), takes as an input. Effectively &apos;out_var&apos; is the variable that is used in the input function to analyse the matrix.</para>
<para>For example to calculate the sum of the elements of the matrix, the input function should contain a static variable, which is written to the &apos;out_var&apos; once the reset flag passed in is 1 (e.g on last element in matrix).</para>
<para>Note, this function is entirely different from &apos;mat_apply_func&apos; as this function does not modify or write, a new matrix, it only applies a function to all elements of a matrix.</para>
<para>The function must take in a double, and should not return anything.</para>
<para>&apos;out_var&apos; is a void pointer, to allow this function to be used for various purposes, void pointer should be cast, inside &apos;func&apos;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mat</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_var</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tensor_2d.c" line="217" column="5" bodyfile="src/tensor_2d.c" bodystart="217" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tensor__2d_8h" kindref="compound">tensor_2d.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//corresponds<sp/>to<sp/>a<sp/>matrix<sp/>of<sp/>16384<sp/>x<sp/>16384,<sp/>will<sp/>use<sp/>0.25<sp/>GB<sp/>of<sp/>RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="tensor__2d_8c_1a63649d1769e1ed482025cd15b43da0f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_NUM_ELEMENTS<sp/>268435456</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="tensor__2d_8c_1a2667b0018203aabb8f0427b382d17f04" refkind="member"><highlight class="normal"><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/><ref refid="tensor__2d_8c_1a2667b0018203aabb8f0427b382d17f04" kindref="member">mat_make</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cols)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ull_num_elems<sp/>=<sp/>num_rows*num_cols;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//limit<sp/>because<sp/>unsigned<sp/>long<sp/>cannot<sp/>hold<sp/>a<sp/>number<sp/>greater<sp/>than<sp/>4294967295.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ull_num_elems<sp/>&gt;<sp/>4294967295){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Requested<sp/>matrix<sp/>with<sp/>%lld<sp/>elements.\n&quot;</highlight><highlight class="normal">,<sp/>ull_num_elems);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Maximum<sp/>possible<sp/>number<sp/>of<sp/>elements<sp/>is:<sp/>%ld\n&quot;</highlight><highlight class="normal">,<sp/>4294967295);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_elems<sp/>=<sp/>num_rows*num_cols;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//limit<sp/>specfied<sp/>in<sp/>#define<sp/>MAX_NUM_ELEMENTS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_elems<sp/>&gt;<sp/><ref refid="tensor__2d_8c_1a63649d1769e1ed482025cd15b43da0f7" kindref="member">MAX_NUM_ELEMENTS</ref>){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Requested<sp/>matrix<sp/>with<sp/>%ld<sp/>elements.\n&quot;</highlight><highlight class="normal">,<sp/>num_elems);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Maximum<sp/>possible<sp/>number<sp/>of<sp/>elements<sp/>is:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="tensor__2d_8c_1a63649d1769e1ed482025cd15b43da0f7" kindref="member">MAX_NUM_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>mat-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref><sp/>=<sp/>num_elems;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>mat-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>=<sp/>num_rows;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>mat-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>=<sp/>num_cols;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>malloc(num_elems*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(mat);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>mat-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="tensor__2d_8c_1ad153f4d7a7d83c0ede5ebf3217fcb02d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1ad153f4d7a7d83c0ede5ebf3217fcb02d" kindref="member">mat_free</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>**<sp/>mat_ptr){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*mat_ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>free((*mat_ptr)-&gt;data);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*mat_ptr);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>*mat_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="tensor__2d_8c_1ae908690f3acf39314e6bf3f944f5ca98" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1ae908690f3acf39314e6bf3f944f5ca98" kindref="member">mat_zeros</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(mat_out-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>);<sp/>i++){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="tensor__2d_8c_1a2b806e3d6872c2617c3c820b0337fdfd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1a2b806e3d6872c2617c3c820b0337fdfd" kindref="member">mat_rand</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(mat_out-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>);<sp/>i++){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>low<sp/>+<sp/>(high-low)*(rand()/2147483647.0);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="tensor__2d_8c_1a957359600527bb5755783f637bcedbb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1a957359600527bb5755783f637bcedbb8" kindref="member">mat_eye</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(mat_out-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>);<sp/>i++){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>(mat_out-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref>+1)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="tensor__2d_8c_1adeaac7723f2ea3c6d7019ba1c3faabd5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1adeaac7723f2ea3c6d7019ba1c3faabd5" kindref="member">mat_print</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat==NULL){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>(mat-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>);<sp/>i++){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%f\t&quot;</highlight><highlight class="normal">,<sp/>mat-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i+1)<sp/>%<sp/>mat-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="tensor__2d_8c_1a9ae20928f936d462d68cf5b1596283e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1a9ae20928f936d462d68cf5b1596283e2" kindref="member">mat_add</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_a,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_b,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a<sp/>==<sp/>NULL<sp/>||<sp/>mat_b<sp/>==<sp/>NULL||<sp/>mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>||<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>||<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref>){</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>+<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="tensor__2d_8c_1a737a62b14085e7e309f3b1ffe1eb26dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1a737a62b14085e7e309f3b1ffe1eb26dc" kindref="member">mat_sub</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_a,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_b,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a<sp/>==<sp/>NULL<sp/>||<sp/>mat_b<sp/>==<sp/>NULL||<sp/>mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>||<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>||<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref>){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>-<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="tensor__2d_8c_1a574ba2646f2cf52aec9655161f3d9607" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1a574ba2646f2cf52aec9655161f3d9607" kindref="member">mat_mul</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_a,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_b,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a<sp/>==<sp/>NULL<sp/>||<sp/>mat_b<sp/>==<sp/>NULL<sp/>||<sp/>mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_a-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref>){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_out-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>||<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_b-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mat_index;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row=0;<sp/>row&lt;mat_a-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref>;<sp/>row++){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col=0;<sp/>col&lt;mat_b-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>;<sp/>col++){</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_index<sp/>=<sp/>row*mat_out-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>+col;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;mat_a-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>;<sp/>k++){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[mat_index]<sp/>+=<sp/>mat_a-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[(row*mat_a-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>)+k]*mat_b-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[(mat_b-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>*k)+col];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="tensor__2d_8c_1a7f8ce2f8aaa0c61e84c9ab72e1a4cef0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1a7f8ce2f8aaa0c61e84c9ab72e1a4cef0" kindref="member">mat_transpose</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat<sp/>==<sp/>NULL<sp/>||<sp/>mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>||<sp/>mat-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>){</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col=<sp/>0;<sp/>col&lt;mat-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>;<sp/>col++){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=0;<sp/>row&lt;mat-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref>;<sp/>row++){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[row*mat-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>+<sp/>col]<sp/>=<sp/>mat-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[row+col*mat-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="tensor__2d_8c_1ab29c9ef88f94cc1ec4d680df1937cd07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1ab29c9ef88f94cc1ec4d680df1937cd07" kindref="member">mat_copy</ref>(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat<sp/>==<sp/>NULL<sp/>||<sp/>mat_out<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>||<sp/>mat-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>){</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;mat-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>mat-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="tensor__2d_8c_1acd1ed3b8431bd34db8454fc20d2e9254" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1acd1ed3b8431bd34db8454fc20d2e9254" kindref="member">mat_apply_func</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(func)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d),<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out){</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat<sp/>==<sp/>NULL||<sp/>func==NULL<sp/>||<sp/>mat_out<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a809ce78f21bd51f42dc21a0881e0eb33" kindref="member">n_rows</ref><sp/>||<sp/>mat-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref><sp/>!=<sp/>mat_out-&gt;<ref refid="structtensor__2d_1a74f3fe7324753175d7a4af46c6588d38" kindref="member">n_cols</ref>){</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;mat-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_out-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]<sp/>=<sp/>func(mat-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217" refid="tensor__2d_8c_1ada02f47e919e61813c57d8b990ed4ce0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tensor__2d_8c_1ada02f47e919e61813c57d8b990ed4ce0" kindref="member">mat_apply_func_2</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(func)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out_var),<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out_var){</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat<sp/>==<sp/>NULL||<sp/>func==NULL)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;mat-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>(mat-&gt;<ref refid="structtensor__2d_1a55ed2709aa79847a1dbd09e87e08deeb" kindref="member">n_elems</ref>-1)){</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(mat-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i],<sp/>1,<sp/>out_var);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(mat-&gt;<ref refid="structtensor__2d_1a4e4247a26be28cb685b4ebbfb0108f3e" kindref="member">data</ref>[i],<sp/>0,<sp/>out_var);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tensor_2d.c"/>
  </compounddef>
</doxygen>
