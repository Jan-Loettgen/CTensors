<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="NN__layers_8h" kind="file" language="C++">
    <compoundname>NN_layers.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes refid="tensor__2d_8h" local="yes">tensor_2d.h</includes>
    <includedby refid="NN__layers_8c" local="yes">NN_layers.c</includedby>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>NN_layers.h</label>
        <link refid="NN__layers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>tensor_2d.h</label>
        <link refid="tensor__2d_8h"/>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>NN_layers.c</label>
        <link refid="NN__layers_8c"/>
      </node>
      <node id="1">
        <label>NN_layers.h</label>
        <link refid="NN__layers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structDense__layer" prot="public">Dense_layer</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="NN__layers_8h_1a4edd615f3270dcf9bde0e66edd549e38" prot="public" static="no">
        <type>struct <ref refid="structDense__layer" kindref="compound">Dense_layer</ref></type>
        <definition>typedef struct Dense_layer Dense_layer</definition>
        <argsstring></argsstring>
        <name>Dense_layer</name>
        <briefdescription>
<para>&lt; this library is necessary as it provides the backend matrix functionality required for a neural network. </para>
        </briefdescription>
        <detaileddescription>
<para>This struct defines a Dense layer.</para>
<para>A dense layer is a neural network layer where all neurons are connected to all neurons in the previous layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/NN_layers.h" line="32" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="NN__layers_8h_1ad57cc00b888a6e34dd7cda77f0859c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDense__layer" kindref="compound">Dense_layer</ref> *</type>
        <definition>Dense_layer * dense_make</definition>
        <argsstring>(unsigned int num_neurons, unsigned int num_inputs, char activation[])</argsstring>
        <name>dense_make</name>
        <param>
          <type>unsigned int</type>
          <declname>num_neurons</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_inputs</declname>
        </param>
        <param>
          <type>char</type>
          <declname>activation</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Function returns a dense layer struct instance, this function is used to initalise a dense layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_neurons</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned int : Number of neurons in this dense layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned int : number of inputs, required to create weights of this layer to inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">activation</parametername>
</parameternamelist>
<parameterdescription>
<para>function pointer int*(func_ptr)*(mat_in, mat_out), a pointer to the activation function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dense_layer* A struct defining the dense layer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/NN_layers.h" line="42" column="13" bodyfile="src/NN_layers.c" bodystart="10" bodyend="54" declfile="src/NN_layers.h" declline="42" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="NN__layers_8h_1a29b58829b8032d6455095a97ee40e160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dense_free</definition>
        <argsstring>(Dense_layer **dense_layer)</argsstring>
        <name>dense_free</name>
        <param>
          <type><ref refid="structDense__layer" kindref="compound">Dense_layer</ref> **</type>
          <declname>dense_layer</declname>
        </param>
        <briefdescription>
<para>This function is used to free the memory allocated for a dense layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the counter part to the function &apos;dense_make&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dense_layer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer to a dense layer that is to be freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointer points to NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/NN_layers.h" line="52" column="5" bodyfile="src/NN_layers.c" bodystart="56" bodyend="71" declfile="src/NN_layers.h" declline="52" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="NN__layers_8h_1a02ed8661062be087e1407077387478c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dense_set_rand</definition>
        <argsstring>(double low, double high, Dense_layer *dense_layer)</argsstring>
        <name>dense_set_rand</name>
        <param>
          <type>double</type>
          <declname>low</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="structDense__layer" kindref="compound">Dense_layer</ref> *</type>
          <declname>dense_layer</declname>
        </param>
        <briefdescription>
<para>Function sets weights of dense layers to random values in the range of low, high. Biases are set to 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower limit of the random number generation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper limit of random number generation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dense_layer</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structDense__layer" kindref="compound">Dense_layer</ref> pointer whose weights should be set to 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>sets weights to random values in the range [0, scale]</para>
<para>sets bias of layer to 0.</para>
        </inbodydescription>
        <location file="src/NN_layers.h" line="62" column="5" bodyfile="src/NN_layers.c" bodystart="73" bodyend="81" declfile="src/NN_layers.h" declline="62" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="NN__layers_8h_1a1c0547d8e31b12285bfcee00339e96c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dense_forward</definition>
        <argsstring>(Dense_layer *dense_layer, tensor_2d *mat_in, tensor_2d *mat_out, bool training)</argsstring>
        <name>dense_forward</name>
        <param>
          <type><ref refid="structDense__layer" kindref="compound">Dense_layer</ref> *</type>
          <declname>dense_layer</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_in</declname>
        </param>
        <param>
          <type><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref> *</type>
          <declname>mat_out</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>training</declname>
        </param>
        <briefdescription>
<para>Function used to make a dense layer forward pass. </para>
        </briefdescription>
        <detaileddescription>
<para>input &apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; with multiple inputs stacked along columns, and multiple batch inputs along rows. input shape should be (batch_size, number of inputs).</para>
<para>output &apos;<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>&apos; a matrix to which to write the final layer outputs, shape should be (1, num_neurons).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dense_layer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;<ref refid="structDense__layer" kindref="compound">Dense_layer</ref>&apos; struct making the forward pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat_in</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a tensor of inputs, inputs should be stacked along columns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a output tensor to which to write the final layer outputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>training</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean flag that indicates whether the layer should keep track of gradients for this forward pass. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int : 0 if sucessful, 1 : if the dereferenced input pointers point to NULL, 3 if one of the underlying matrix operations fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>X*W = Y</para>
<para>Y + B = Y</para>
<para>f(Y) = Z</para>
        </inbodydescription>
        <location file="src/NN_layers.h" line="78" column="5" bodyfile="src/NN_layers.c" bodystart="85" bodyend="110" declfile="src/NN_layers.h" declline="78" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains the declaration of functions and structs of various neural network layer types. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jan Luca Loettgen (<ulink url="mailto:janlucaloettgen@gmail.com">janlucaloettgen@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>10-03-2022</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2022 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DENSE_LAYER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DENSE_LAYER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tensor__2d_8h" kindref="compound">tensor_2d.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="23" refid="structDense__layer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDense__layer" kindref="compound">Dense_layer</ref>{</highlight></codeline>
<codeline lineno="24" refid="structDense__layer_1ac76aa362e051cccf8e6f7ed93a2379a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDense__layer_1ac76aa362e051cccf8e6f7ed93a2379a6" kindref="member">num_neurons</ref>;<sp/></highlight></codeline>
<codeline lineno="25" refid="structDense__layer_1a6b2e070659ff1714333c86beba2d779c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDense__layer_1a6b2e070659ff1714333c86beba2d779c" kindref="member">num_inputs</ref>;<sp/></highlight></codeline>
<codeline lineno="26" refid="structDense__layer_1ae7f1c485520fb725f0549420905c8240" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/><ref refid="structDense__layer_1ae7f1c485520fb725f0549420905c8240" kindref="member">weights</ref>;<sp/></highlight></codeline>
<codeline lineno="27" refid="structDense__layer_1a31225d6adccfa475c2c9614789aaaea9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/><ref refid="structDense__layer_1a31225d6adccfa475c2c9614789aaaea9" kindref="member">bias</ref>;<sp/></highlight></codeline>
<codeline lineno="28" refid="structDense__layer_1a7443971fc4303ae79f5e8134fe2283d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/><ref refid="structDense__layer_1a7443971fc4303ae79f5e8134fe2283d7" kindref="member">Y</ref>;<sp/></highlight></codeline>
<codeline lineno="29" refid="structDense__layer_1ae1520651f0835910fe8ce3a05b16cdfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/><ref refid="structDense__layer_1ae1520651f0835910fe8ce3a05b16cdfd" kindref="member">Z</ref>;<sp/></highlight></codeline>
<codeline lineno="30" refid="structDense__layer_1a40d2787799fb771ef9b2192fa0de4678" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structDense__layer_1a40d2787799fb771ef9b2192fa0de4678" kindref="member">activation_ptr</ref>)(<ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out);<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="NN__layers_8h_1a4edd615f3270dcf9bde0e66edd549e38" refkind="member"><highlight class="normal">}<ref refid="NN__layers_8h_1a4edd615f3270dcf9bde0e66edd549e38" kindref="member">Dense_layer</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="structDense__layer" kindref="compound">Dense_layer</ref>*<sp/><ref refid="NN__layers_8h_1ad57cc00b888a6e34dd7cda77f0859c47" kindref="member">dense_make</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_neurons,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_inputs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>activation[]);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="NN__layers_8h_1a29b58829b8032d6455095a97ee40e160" kindref="member">dense_free</ref>(<ref refid="structDense__layer" kindref="compound">Dense_layer</ref>**<sp/>dense_layer);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="NN__layers_8h_1a02ed8661062be087e1407077387478c2" kindref="member">dense_set_rand</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high,<ref refid="structDense__layer" kindref="compound">Dense_layer</ref>*<sp/>dense_layer);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="NN__layers_8h_1a1c0547d8e31b12285bfcee00339e96c4" kindref="member">dense_forward</ref>(<ref refid="structDense__layer" kindref="compound">Dense_layer</ref>*<sp/>dense_layer,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_in,<sp/><ref refid="structtensor__2d" kindref="compound">tensor_2d</ref>*<sp/>mat_out,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>training);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/NN_layers.h"/>
  </compounddef>
</doxygen>
